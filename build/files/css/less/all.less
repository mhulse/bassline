/**
 * @see http://www.aisleone.net/2009/design/8-ways-to-improve-your-typography/
 * @see http://markboulton.co.uk/journal/five-simple-steps-to-better-typography
 * @see http://webtypography.net/toc/
 * @see http://www.alistapart.com/articles/more-meaningful-typography/
 * @see http://modularscale.com/
 */

/*----------------------------------( BOX MODEL NORMALIZE )----------------------------------*/

/**
 * Apply a natural box layout model to all elements.
 *
 * @see http://www.paulirish.com/2012/box-sizing-border-box-ftw/
 * @see http://css-tricks.com/box-sizing/
 */

* {
	-webkit-box-sizing: border-box;
	   -moz-box-sizing: border-box;
	        box-sizing: border-box;
}

/*----------------------------------( ROOT ELEMENT )----------------------------------*/

/**
 * The `<html>` element represents the root of an HTML document.
 *
 * Base `font-size` = `16px`.
 *
 * PX to EM:
 * Formula: [desired `font-size` in `px`] / [parent `font-size` in `px`]
 * Example: 12px / 16px = .75em
 *
 * PX to %:
 * Formula: ([desired `font-size` in `px`] / [parent `font-size` in `px`]) * 100
 * Example: (12px / 16px) * 100 = 75%
 *
 * PX to PT:
 * Formula: [desired `font-size` in `px`] * ([`pts` per `in`] / [`px` per `in`])
 * Example: 16px * (72pt / 96px) = 12pt
 *
 * EM to PX:
 * Formula: [desired `font-size` in `em`] * [parent `font-size` in `px`]
 * Example: .75em * 16px = 12px
 *
 * EM to %:
 * Formula: [desired `font-size` in `em`] * 100
 * Example: .75em * 100 = 75%
 *
 * @see http://pxtoem.com/
 * @see http://dev.w3.org/html5/spec/Overview.html#the-html-element-0
 */

html {
	height: 100%; /* Expand to height of browser window. */
	overflow-y: scroll; /* Force scrollbar in non-IE. */
}

/*----------------------------------( SECTIONS )----------------------------------*/

/**
 * The `<body>` element represents the main content of the document.
 * 
 * Baseline grid:
 *
 * Base font size = 16px or 100% or 1em.
 * Base line height = 24px or 150% or 1.5em.
 *
 * Rule: Make sure all elements take up a vertical height (including
 * margins) are multiples of our base line height (24).
 * 
 * Calculate line height by dividing base line height by desired font size.
 *
 * If the font size is greater than `24px`, then base your calculations on
 * the next full `line-height` value up. For example, if the desired font
 * size is `2.875em` (i.e. `46px`), the math would be:
 *
 * (`1.5` * `2`) / `2.875` = `1.04347826086957`
 *
 * Line height chart:
 *                       |                   |                              |                                |                            |                                 |
 * Target `line-height`: | x1 = 24px = 1.5em | x2 = 48px = 3em              | x3 = 72px = 4.5em              | x4 = 96px = 6em            | x5 = 120px = 7.5em              |
 *  Min/max `font-size`: | 0 - 24px (1.5em)  | 25px (1.5625em) - 48px (3em) | 49px (3.0625em) - 72px (4.5em) | 73px (4.5625) - 96px (6em) | 97px (6.0625em) - 120px (7.5em) |
 *                       |                   |                              |                                |                            |                                 |
 *
 * Use these values for `line-height` offsets:
 *           |      |     |      |     |      |     |      |
 * Fraction: | 1/8  | 1/4 | 3/8  | 1/2 | 5/8  | 3/4 | 7/8  |
 *  Decimal: | .125 | .25 | .375 | .5  | .625 | .75 | .875 |
 *           |      |     |      |     |      |     |      |
 *
 * Important: WebKit needs at least ten-millionth decimal places; for
 * example: `line-height: 1.3333333;` (that's 7 decimal places).
 *
 * @see https://gist.github.com/4277585
 * @see http://advent2012.digitpaint.nl/13/
 * @see http://www.netmagazine.com/tutorials/preserving-vertical-rhythm-css-and-jquery
 * @see http://www.awayback.com/revised-font-stack/
 * @see http://code.stephenmorley.org/html-and-css/the-myth-of-web-safe-fonts/
 * @see http://stackoverflow.com/questions/2703056/body-font-size-100-01-vs-body-font-size-100
 * @see http://www.sitepoint.com/typography-baseline-rhythm-deciphered/
 * @see http://modularscale.com/scale/?px1=16&px2=40&ra1=1.618&ra2=0
 * @see http://dev.w3.org/html5/spec/Overview.html#the-body-element-0
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/font-smooth
 */

body {
	font-family: @sans;
	font-size: 100%;
	line-height: 1.5;
	color: @raven;
	/* Improve default text rendering, handling of kerning pairs and ligatures: */
	-webkit-font-smoothing: antialiased;
	        font-smoothing: antialiased;
	text-rendering: optimizeLegibility;
	/* Initial height of `<html>`, but will expand taller if necessary: */
	min-height: 100%; /* Compliant browsers. */
	background: @milk;
}

/*--------------------------------------------------------------------*/

/**
 * Represents the contact information for its enclosing section. If it is
 * a child of the body element, then it applies to the document as a whole.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-address-element
 */

address {
	font-size: 1rem; // 16px
	line-height: 1.125; // (((1.5 / 1) = 1.5) * .75) = 1.125
	font-style: italic;
	margin: .625rem 0; // 10px 0
}

/**
 * The `<article>` element represents a section of a page that consists of
 * a composition that forms an independent part of a document, page, or
 * site. This could be a forum post, a magazine or newspaper article, a
 * Web log entry, a user-submitted comment, or any other independent item
 * of content.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-article-element
 */

article {}

/**
 * The `<aside>` element represents a section of a page consisting of
 * content that is tangentially related to the content around the
 * `<aside>` element, and which could be considered separate from that
 * content. Such sections are often represented as sidebars in printed
 * typography.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-aside-element
 */

aside {}

/**
 * The `<footer>` element represents the "footer" of a document or section
 * of a document. It typically contains metadata about its enclosing
 * section, such as who wrote it, links to related documents, copyright
 * data, etc. Contact information for the section given in a footer should
 * be marked up using the address element.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-footer-element
 */

footer {}

/**
 * Represent headings and subheadings. These elements rank in importance
 * according to the number in their name. The `<h1>` element is said to
 * have the highest rank, the `<h6>` element has the lowest rank, and two
 * elements with the same name have equal rank.
 *
 * Note: The `.h1`-`.h6` classes should be used to maintain the
 * semantically appropriate heading levels.
 *
 * Attention: Classes NOT for use on non-headings.
 *
 * @see https://groups.google.com/d/topic/object-oriented-css/GE1uzU2Bu48/discussion
 * @see http://www.stubbornella.org/content/2011/09/06/style-headings-using-html5-sections/
 * @see https://github.com/stubbornella/oocss/blob/master/core/heading/heading.css
 * @see http://csswizardry.com/2012/02/pragmatic-practical-font-sizing-in-css/
 * @see http://dev.w3.org/html5/spec/Overview.html#the-h1-h2-h3-h4-h5-and-h6-elements
 */

h1, .h1, h2, .h2, h3, .h3, h4, .h4, h5, .h5, h6, .h6 {
	font: bold 1rem/1.5 @sans; // 16px
	margin: 0 0 .3125rem; // 0 0 5px
}
.sh1, .sh2, .sh3, .sh4, .sh5, .sh6 {
	font: 1rem/1.5 @serif; // 16px
	margin: 0 0 .625rem; // 0 0 10px
}
h1, .h1, .sh1 {
	font-size: 2.875rem; // 46px
	line-height: 1.04347826086957; // (3 / 2.875) = 1.04347826086957
}
h2, .h2, .sh2 {
	font-size: 2.5rem; // 40px
	line-height: 1.05; // (((3 / 2.5) = 1.2) * .875) = 1.05
}
h3, .h3, .sh3 {
	font-size: 2.125rem; // 34px
	line-height: 1.05882352941176; // (((3 / 2.125em) = 1.41176470588235) * .75) = 1.05882352941176
}
h4, .h4, .sh4 {
	font-size: 1.75rem; // 28px
	line-height: 1.07142857142857; // (((3 / 1.75em) = 1.71428571428571) * .625) = 1.07142857142857
}
h5, .h5, .sh5 {
	font-size: 1.375rem; // 22px
	line-height: 1.09090909090909; // (1.5 / 1.375) = 1.09090909090909
}
h6, .h6, .sh6 {
	font-size: 1.125rem; // 18px
	line-height: 1.16666666666666; // (((1.5 / 1.125) = 1.33333333333333) * .875) = 1.16666666666666
}
h1, .h1, h2, .h2, h3, .h3, h4, .h4, h5, .h5, h6, .h6,
.sh1, .sh2, .sh3, .sh4, .sh5, .sh6 {
	a {
		color: @hulk;
		text-decoration: none;
		&:visited { color: @hulk; }
		&:visited:hover,
		&:focus,
		&:focus:hover,
		&:hover,
		&:active {
			color: @goblin;
			text-decoration: none;
		}
	}
}

/**
 * The `<header>` element represents the "header" of a document or section
 * of a document. It is typically used to group a set of `<h1>`–`<h6>`
 * elements to mark up a page's title with its subtitle or tagline. header
 * elements may, however, contain more than just the section's headings
 * and subheadings — e.g., version history information or publication date.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-header-element
 */

header {}

/**
 * The main element is an exact analogue of ARIA's `role="main"`, and is
 * designed to show screenreaders and assistive technologies exactly where
 * main content begins, so it can be a target for a "skip links" keyboard
 * command, for example. It could also be used for content syndication;
 * mobile browsers could zoom in on main when encountering non-responsive
 * websites. It should therefore be used once per page. If you use
 * something like `<div id="main">` (or similar, such as `<div
 * id="content">`), simply replace that with `<main role="main">`.
 *
 * @see http://www.w3.org/html/wg/drafts/html/master/grouping-content.html#the-main-element
 */

main {}

/**
 * The `<nav>` element represents navigation for a document. It is a
 * section containing links to other documents or to parts within the
 * current document.
 *
 * Not all groups of links on a page need to be in a this element — only
 * groups of primary navigation links. In particular, it is common for
 * footers to have a list of links to various key parts of a site, but the
 * `<footer>` element is more appropriate in such cases.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-nav-element
 */

nav {}

/**
 * The `<section>` element represents a generic document or application
 * section. In this context, a section is a thematic grouping of content,
 * typically with a header, possibly with a footer. Examples include
 * chapters in a book, the various tabbed pages in a tabbed dialog box, or
 * the numbered sections of a thesis. A web site's home page could be
 * split into sections for an introduction, news items, contact information.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-section-element
 */

section {}

/*----------------------------------( GROUPING CONTENT )----------------------------------*/

/**
 * The `<blockquote>` element represents a section that is quoted from
 * another source.
 *
 * Content inside a `<blockquote>` must be quoted from another source,
 * whose address, if it has one, may be cited in the `cite` attribute.
 *
 * @see http://html5doctor.com/blockquote-q-cite/
 * @see http://www.markinns.com/articles/full/hanging_quotation_marks
 * @see http://dev.w3.org/html5/spec/Overview.html#the-blockquote-element
 */

blockquote {
	font-size: 1rem; // 16px
	line-height: 1.5rem;
	font-style: italic;
	margin: .625rem 0; // 10px 0
	padding-left: .625rem; // 10px
	border-left: .1875rem solid @grayc; // 3px
	quotes: none;
}
blockquote:before,
blockquote:after {
	content: '';
	content: none;
}

.stoops-blockquote {
	font-style: normal;
	border-width: .0625rem; // 1px
	border-left-width: .375rem; // 3px
	border-style: solid;
	border-color: fade(@prius, 20%);
	background: fade(@prius, 3%);
	margin: .625rem 0; // 10px 0
	padding: .625rem; // 10px
	padding-left: 1.25rem; // 20px
	position: relative;
	border-radius: 0 .625rem .625rem 0; // 0 10px 10px 0
}
	.stoops-blockquote > :first-child { margin-top: 0 !important; }
	.stoops-blockquote > :last-child { margin-bottom: 0 !important; }
	.stoops-blockquote p {
		color: darken(@prius, 20%);
		font-style: italic;
	}
	.stoops-blockquote footer {
		font-size: .875rem; // 14px
		color: darken(@prius, 10%);
		line-height: 1.71428571428571; // (1.5 / .875) = 1.71428571428571
	}
@media all and (min-width: 45em) { // (720px / 16) = 45em
	.stoops-blockquote:before {
		font: 6.25rem/1 @sans; // 100px
		color: fade(darken(@prius, 10%), 40%);
		display: block;
		content: "\201C";
		position: absolute;
		left: -.4375em; // -7px
		top: -.125em; // 2px
	}
}

/**
 * The `<div>` element has no special meaning at all. It represents its
 * children. It can be used with the `class`, `lang`, and `title`
 * attributes to mark up semantics common to a group of consecutive
 * elements.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-div-element
 */

div {}

/**
 * The `<dl>` (description list) element represents a description list
 * consisting of zero or more name-value groups. Each group must consist
 * of one or more names (dt elements) each followed by one or more values
 * (dd elements).
 *
 * Name-value groups may be terms and definitions, metadata topics and
 * values, or any other groups of name-value data. The values within a
 * group are alternatives; multiple paragraphs forming part of the same
 * value must all be given within the same dd element.
 *
 * The `<dt>` (description term) element represents the term, or name,
 * part of a term-description group in a description list (`<dl>` element).
 *
 * The `<dd>` (description definition) element represents the description,
 * definition, or value, part of a term-description group in a description
 * list (`<dl>` element).
 *
 * @see http://www.maxdesign.com.au/articles/definition/
 * @see http://dev.w3.org/html5/spec/Overview.html#the-dl-element
 * @see http://dev.w3.org/html5/spec/Overview.html#the-dt-element
 * @see http://dev.w3.org/html5/spec/Overview.html#the-dd-element
 */

dl {
	font-size: 1rem; // 16px
	line-height: 1.125; // (1.5 * .75) = 1.125
	margin: .625rem 0; // 10px 0
	padding: 0;
}
	dl dd,
	dl dt {
		margin: 0 0 .375rem; // 0 0 6px
		padding: 0;
	}
	dl dt { font-weight: bold; }
	dl dd { margin-left: .5rem; } // 8px

/**
 * The `<figure>` element represents some flow content, optionally with a
 * caption, that is self-contained and is typically referenced as a single
 * unit from the main flow of the document.
 *
 * The figure element can be used to annotate illustrations, diagrams,
 * photos, code listings, etc., that are referenced in the main content of
 * the document, but that could, without affecting the flow of the
 * document, be moved away from that primary content — e.g., to the side
 * of the page, to dedicated pages, or to an appendix.
 *
 * The `<figcaption>` element represents a caption or legend for the rest
 * of the contents of the `<figcaption>` element's parent figure element,
 * if any.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-figure-element
 * @see http://dev.w3.org/html5/spec/Overview.html#the-figcaption-element
 */

figure {
	font-family: @sans;
	margin: .625rem 0; // 10px 0
}
	figure img { display: block; }
	figure figcaption {
		font-size: .875rem; // (14px / 16px) = .875em
		line-height: 1.5; // ((((1.5 / .875) = 1.71428571428571) * .875) = 1.28571428571428)
		xmargin: .4375rem 0; // (.875 / 2) = .4375
	}
	figure p {
		font-family: inherit;
		font-size: inherit;
		margin: inherit;
	}
		figure figcaption > :first-child { margin-top: 0 !important; }
		figure figcaption > :last-child { margin-bottom: 0 !important; }

.stoops-figure {}
	.stoops-figure figcaption {
		color: darken(@prius, 20%);
		background: fade(@prius, 20%);
		padding: .625rem; // 10px
	}

/**
 * The `<hr>` element represents a paragraph-level thematic break. It
 * separates different topics within a section of prose, or between scenes
 * in a novel.
 *
 * @see https://gist.github.com/4277585
 * @see https://github.com/h5bp/html5-boilerplate/blob/b378ce239dfb017e32fbeacc5ab0346258b089e2/css/main.css#L42-L53
 * @see https://github.com/twitter/bootstrap/blob/070c125ceceb2a164773f51226950350445160ee/docs/assets/css/bootstrap.css#L876-L881
 * @see http://dev.w3.org/html5/spec/Overview.html#the-hr-element-0
 * @see http://www.maxdesign.com.au/articles/hr/
 */

hr, .hr, .hr1, .hr2, .hr3, .hr4, .hr5, .hr6 {
	color: fade(@bruise, 20%);
	border: 0;
	background: fade(@bruise, 20%);
	height: .0625rem; // 1px
	margin: .625rem 0; // 10px
	padding: 0;
}
	.hr1 {
		background: fade(@bruise, 25%);
		height: .125rem; // 2px
	}
	.hr2 {
		background: fade(@bruise, 35%);
		height: .1875rem; // 3px
	}
	.hr3 {
		background: fade(@bruise, 45%);
		height: .25rem; // 4px
	}
	.hr4 {
		background: fade(@bruise, 55%);
		height: .3125rem; // 5px
	}
	.hr5 {
		background: fade(@bruise, 65%);
		height: .375rem; // 6px
	}
	.hr6 {
		background: fade(@bruise, 75%);
		height: .4375rem; // 7px
	}

/**
 * The `<p>` element represents a paragraph.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-p-element
 */

p {
	font-family: @serif;
	font-size: 1rem; // 16px
	line-height: 1.5;
	margin: .75rem 0; // (1.5 / 2) = .75
}
	
	/**
	 * Drop caps.
	 *
	 * Firefox handled these classes better than Safari (Mac). For some
	 * reason, a base `line-height` of `1.5` worked better in Safari. Safari's
	 * page zoom does weird stuff... I'm tired of trying to get this to work.
	 *
	 * @see http://www.smashingmagazine.com/2012/04/03/drop-caps-historical-use-and-current-best-practices/
	 * @see http://css-tricks.com/snippets/css/drop-caps/
	 * @see http://www.sitepoint.com/a-simple-css-drop-cap/
	 * @see http://phrogz.net/css/vertical-align/
	 */
	
	p .firsties {
		font-family: @serif;
		font-style: normal;
		font-weight: normal;
		color: @gray3;
		font-size: 4.5rem; // 72px
		line-height: 1; // (4.5 / 4.5) = 1
		margin-right: .5rem;
		vertical-align: middle;
		float: left;
		display: inline;
	}
	
	/*
	p:first-of-type:first-letter {
		font-family: @serif;
		font-size: 6.25rem;
		line-height: 1.2;
		margin: 0;
		padding: 0;
		text-transform: uppercase;
		float: left;
		display: inline;
	}
	*/

pre {
	font-family: @mono;
	font-size: .875rem; // (14px / 16px) = .875em
	line-height: 1.5; // (((1.5 / .875) = 1.71428571428571) * .875) = 1.5
	border: .0625rem solid fade(@raven, 15%);
	background: fade(@milk, 50%);
	margin: .625rem 0; // 10px
	padding: .625rem; // 10px
	word-wrap: normal;
	overflow: auto;
	white-space: pre;
	-webkit-overflow-scrolling: touch;
}
	pre code,
	pre kbd,
	pre samp {
		text-shadow: none;
		line-height: inherit;
		color: inherit;
		font-size: 1em;
		background: transparent;
		margin: 0;
		padding: 0;
		top: 0;
		border: 0;
		border-radius: 0;
		box-shadow: none;
	}
	
	/**
	 * Blinking cursor.
	 *
	 * @see http://fredericiana.com/2012/11/04/html5-blink-tag/
	 */
	
	.stoops-pre-cursor {
		-webkit-animation-duration: 2s;
		        animation-duration: 2s;
		-webkit-animation-name: stoops-cursor-blink;
		        animation-name: stoops-cursor-blink;
		-webkit-animation-iteration-count: infinite;
		        animation-iteration-count: infinite;
		-webkit-animation-timing-function: steps(2, start);
		        animation-timing-function: steps(2, start);
	}
		@-webkit-keyframes stoops-cursor-blink { 80% { visibility: hidden; } }
		        @keyframes stoops-cursor-blink { 80% { visibility: hidden; } }

.stoops-pre {
	color: @gray3;
	background: fade(@raven, 2.5%);
	box-shadow: inset 0 0 .625rem 0 fade(@raven, 15%); // 10px
}
	.stoops-pre .stoops-pre-prompt { color: @raven; }
.stoops-pre-terminal {
	letter-spacing: .05em;
	color: lighten(spin(@hulk, 45), 20%);
	text-shadow: 0 .0625rem 0 @raven; // 0 1px 0
	background: fade(@gray1, 90%);
	box-shadow: inset 0 0 .3125rem 0 fade(@raven, 50%); // 5px
}
	.stoops-pre-terminal .stoops-pre-prompt { color: lighten(spin(@hulk, 90), 20%); }

/**
 * The `<ol>` element represents a list of items, where the items have
 * been intentionally ordered, such that changing the order would change
 * the meaning of the list.
 *
 * The `<ul>` element represents a list of items, where the order of the
 * items is not important — that is, where changing the order would not
 * materially change the meaning of the list.
 *
 * The `<li>` element represents a list item. If its parent element is an
 * `<ol>`, `<ul>`, or `<menu>` element, then the element is an item of the
 * parent element's list, as defined for those elements. Otherwise, the
 * list item has no defined list-related relationship to any other `<li>`
 * element.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-ol-element
 * @see http://dev.w3.org/html5/spec/Overview.html#the-ul-element
 * @see http://dev.w3.org/html5/spec/Overview.html#the-li-element
 */

ol,
ul {
	font-size: 1em; // 16px
	line-height: 1.125; // (1.5 * .75) = 1.125
	margin: .625rem 0; // 10px 0
	padding: 0;
	list-style-position: outside;
}
ol { margin-left: 2.5rem; } // 40px
ul { margin-left: 1.5rem; } // 24px
	ol li,
	ul li {
		margin: 0 0 .375rem; // (1.5 * .25) = .375 (6px)
		padding: 0;
	}
	li ol { margin-left: 2.5rem; } // 40px
	li ul { margin-left: .5rem; } // 8px

/*----------------------------------( TEXT-LEVEL SEMANTICS )----------------------------------*/

/**
 * If the `<a>` element has an `href` attribute, then it represents a
 * hyperlink (a hypertext anchor). If the `<a>` element has no `href`
 * attribute, then the element represents a placeholder for where a link
 * might otherwise have been placed, if it had been relevant.
 *
 * The `target`, `rel`, `media`, `hreflang` and `type` attributes must be
 * omitted if the `href` attribute is not present.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-a-element
 */

a {
	color: @smurf;
	text-decoration: none;
}
	a:visited { color: @smurf; }
	a:visited:hover,
	a:focus,
	a:focus:hover,
	a:hover,
	a:active {
		color: lighten(@bruise, 20%);
		text-decoration: underline;
	}

/**
 * The `<abbr>` element represents an abbreviation or acronym. The
 * optional `title` attribute may be used to provide an expansion of the
 * abbreviation. If specified, the `title` attribute must contain an
 * expansion of the abbreviation and nothing else.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-abbr-element
 * @see http://www.maxdesign.com.au/articles/abbreviations/
 * @see http://html5doctor.com/the-abbr-element/
 */

abbr { font-style: italic; }
abbr[title] {
	border-bottom: .0625rem dotted; // 1px
	cursor: help;
}

/**
 * The `<bdi>` element represents a span of text that is to be isolated
 * from its surroundings for the purposes of bidirectional text formatting.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-rp-element
 * @see http://stackoverflow.com/a/8546564/922323
 */

bdi {
	direction: ltr;
	unicode-bidi: bidi-override;
}

/**
 * The `<bdo>` element represents explicit text directionality formatting
 * control for its children. It allows authors to override the Unicode
 * bidirectional algorithm by explicitly specifying a direction override.
 *
 * @see http://dev.w3.org/html5/spec/text-level-semantics.html#the-bdo-element
 */

bdo {}

/**
 * The `<br>` element represents a line break. `<br>` elements must be
 * used only for line breaks that are actually part of the content, as in
 * poems or addresses. `<br>` elements must not be used for separating
 * thematic groups in a paragraph.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-br-element
 */

br {}

/**
 * The `<cite>` element represents the title of a work (e.g. a book, a
 * paper, an essay, a poem, a score, a song, a script, a film, a TV show,
 * a game, a sculpture, a painting, a theater production, a play, an
 * opera, a musical, an exhibition, a legal case report, etc). This can be
 * a work that is being quoted or referenced in detail (i.e. a citation),
 * or it can just be a work that is mentioned in passing.
 *
 * A person's name is not the title of a work — even if people call that
 * person a piece of work — and the element must therefore not be used to
 * mark up people's names. (In some cases, the `<b>` element might be
 * appropriate for names; e.g. in a gossip article where the names of
 * famous people are keywords rendered with a different style to draw
 * attention to them. In other cases, if an element is really needed, the
 * `<span>` element can be used.)
 *
 * @see http://html5doctor.com/blockquote-q-cite/
 * @see http://dev.w3.org/html5/spec/Overview.html#the-cite-element
 */

cite { font-style: italic; }

/**
 * The `<code>` element represents a fragment of computer code. This could
 * be an XML element name, a file name, a computer program, or any other
 * string that a computer would recognize.
 *
 * @see http://perishablepress.com/wrapping-content/
 * @see http://dev.w3.org/html5/spec/Overview.html#the-code-element
 * @todo I'd like to have an code:after pseudo element to show line wrap.
 */

code {
	font-family: @mono;
	white-space: pre;           /* CSS 2.0 */
	white-space: pre-wrap;      /* CSS 2.1 */
	white-space: pre-line;      /* CSS 3.0 */
	white-space: -pre-wrap;     /* Opera 4-6 */
	white-space: -o-pre-wrap;   /* Opera 7 */
	white-space: -moz-pre-wrap; /* Mozilla */
	white-space: -hp-pre-wrap;  /* HP Printers */
	word-wrap: break-word;      /* IE 5+ */
	color: @lobster;
	padding: 0 .25em; // 4px
	background: fade(@lobster, 5%);
	border: .0625rem solid fade(@lobster, 20%); // 1px
	border-radius: .1875rem; // 3px
}

/**
 * The `<data>` element links a given content with a machine-readable
 * translation. If the content is time- or date-related, the `<time>` must
 * be used.
 *
 * This element is in the WHATWG version of HTML and not in the W3C draft
 * of HTML5. That means it is a highly experimental feature and shouldn't
 * be use on Web sites.
 *
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/text-level-semantics.html#the-data-element
 * @see http://www.quackit.com/html_5/tags/html_data_tag.cfm
 */

data {}

/**
 * The `<dfn>` element represents the defining instance of a term. The
 * paragraph, description list group, or section that is the nearest
 * ancestor of the `<dfn>` element must also contain the definition(s) for
 * the term given by the `<dfn>` element.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-dfn-element
 * @see http://camendesign.com/code/abbr_redux
 */

dfn {
	font-weight: bold;
	font-style: italic;
}
dfn[title] {
	border-bottom: .0625rem dotted; // 1px
	cursor: help;
}

/**
 * The `<em>` element represents stress emphasis of its contents. The
 * level of emphasis that a particular piece of content has is given by
 * its number of ancestor em elements. The 'stress' being referred to is
 * linguistic. If spoken, this stress would be emphasized pronunciation on
 * a word that can change the nuance of a sentence.
 *
 * The `<i>` element represents a span of text in an alternate voice or
 * mood, or otherwise offset from the normal prose, such as a taxonomic
 * designation, a technical term, an idiomatic phrase from another
 * language, a thought, a ship name, or some other prose whose typical
 * typographic presentation is italicized.
 *
 * Only use `<i>` when nothing more suitable is available — e.g., `<em>`
 * for text with stress emphasis, `<strong>` for text with semantic
 * importance, `<cite>` for titles in a citation or bibliography, `<dfn>`
 * for defining a word, and `<var>` for mathematical variables.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-em-element
 * @see http://dev.w3.org/html5/spec/Overview.html#the-i-element
 */

em,
i { font-style: italic; }

/**
 * The `<kbd>` element represents user input (typically keyboard input,
 * although it may also be used to represent other input, such as voice
 * commands).
 *
 * When the `<kbd>` element is nested inside a `<samp>` element, it
 * represents the input as it was echoed by the system. When the `<kbd>`
 * element contains a `<samp>` element, it represents input based on
 * system output, for example invoking a menu item.
 *
 * When the `<kbd>` element is nested inside another `<kbd>` element, it
 * represents an actual key or other single unit of input as appropriate
 * for the input mechanism.
 *
 * @see http://meta.superuser.com/questions/4788/css-for-the-new-kbd-style
 * @see http://www.w3.org/html/wg/drafts/html/master/text-level-semantics.html#the-kbd-element
 * @see https://github.global.ssl.fastly.net/assets/github-5fd4717c630cd3f2772cb325130d5a24a09fdea0.css
 * @see https://cdn.sstatic.net/superusermeta/all.css
 */

kbd {
	font-family: @mono;
	line-height: 0;
	text-shadow: 0 .0625rem 0 @milk; // 0 1px 0
	color: @gray3;
	background: @graye;
	border: .0625rem solid @grayc; // 1px
	border-radius: .1875rem; // 3px
	margin: 0 .125em; // 0 2px
	padding: .0625em .3125em; // 1px 5px
	position: relative;
	box-shadow:
		0 .0625rem 0 fade(@raven, 20%), // 0 1px 0
		0 0 0 .125rem @milk inset; // 0 0 0 2px
}
	kbd kbd,
	kbd samp {
		text-shadow: none;
		line-height: inherit;
		color: inherit;
		font-size: 1em;
		background: transparent;
		margin: 0;
		padding: 0;
		top: 0;
		border: 0;
		border-radius: 0;
		box-shadow: none;
	}

/**
 * The `<mark>` element represents a run of text in one document marked or
 * highlighted because of its relevance in another context.
 *
 * When used in a quotation or other block of text referenced in a
 * document, it indicates a highlight that was not present in the original
 * document (e.g., a portion of text in an academic publication that has
 * recently come under additional scrutiny).
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-mark-element
 * @see http://html5doctor.com/draw-attention-with-mark/
 */

mark {
	text-decoration: none;
	color: darken(@duck, 30%);
	background-color: fade(@duck, 75%);
	padding: .1875em .25em; // 3px 4px
}

/**
 * The `q` element represents some phrasing content quoted from another
 * source.
 *
 * @see http://html5doctor.com/blockquote-q-cite/
 * @see http://dev.w3.org/html5/spec/Overview.html#the-q-element
 * @see http://alistapart.com/article/qtag
 * http://www.html-5.com/tags/q-tag/index.html
 */

q { quotes: '“' '”' '‘' '’' '“' '”' '‘' '’'; } /* Four levels of nested quotes. */
/* Extra content definitions for pre-2011 WebKit: */
q:before {
	content: '“';
	content: open-quote;
}
q:after {
	content: '”';
	content: close-quote;
}
	q q:before {
		content: '‘';
		content: open-quote;
	}
	q q:after {
		content: '’';
		content: close-quote;
	}

/**
 * The `<ruby>` element represents a container for base text and ruby text
 * — small annotations used for phonetic readings in languages such as
 * Japanese and Chinese. Examples include furigana and zhùyin fúhào
 * (bopomofo).
 *
 * The `<rt>` element represents a container for ruby text inside a
 * `<ruby>` element. The `<rt>` content becomes the small annotations
 * rendered by default above horizontal base text or to the right of
 * vertical base text.
 *
 * The `<rp>` element represents a container for parentheses used to wrap
 * ruby text (`<rt>`) inside a `<ruby>` element. These are displayed by
 * browsers which don't support `<ruby>`, allowing for graceful
 * degradation of ruby content. Browsers which support `<ruby>` hide
 * `<rp>` via `display: none`.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-ruby-element
 * @see http://dev.w3.org/html5/spec/Overview.html#the-rt-element
 * @see http://dev.w3.org/html5/spec/Overview.html#the-rt-element
 * @see http://html5doctor.com/ruby-rt-rp-element/
 */

ruby {}
	rt {}
	rp {
		font-size: 100%;
		display: inline;
	}

/**
 * The `<s>` element represents contents that are no longer accurate or no
 * longer relevant.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-s-element
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color
 * @see http://stackoverflow.com/a/10876429/922323
 */

s {
	color: @gray6;
	-webkit-text-decoration-color: @chili;
	   -moz-text-decoration-color: @chili;
	        text-decoration-color: @chili;
}

/**
 * The `<samp>` element represents (sample) output from a program or
 * computing system.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-samp-element
 */

samp {
	font-family: @mono;
	color: inherit;
	line-height: 0;
	text-shadow: 0 .0625rem 0 @milk; // 0 1px 0
	background: fade(@gray9, 25%);
	padding: .125rem .3125rem; // 2px 5px
	position: relative;
}
	.stoops-samp {
		text-shadow: 0 .0625rem 0 @raven; // 0 1px 0
		color: @milk;
		background: fade(@gray2, 75%);
	}

/**
 * The `<small>` element represents side comments such as small print. It
 * is not intended to be presentational. The `<small>` element should not
 * be used for extended spans of text such as multiple paragraphs, lists,
 * or sections of text. It is only intended for short runs of text.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-small-element
 */

small,
.small {
	font-family: Arial, sans-serif;
	font-size: smaller;
	letter-spacing: .03em;
}
	small a,
	.small a { font-weight: bold; }

/**
 * The `<span>` element doesn't mean anything on its own, but can be
 * useful when used together with the global attributes, e.g. `class`,
 * `lang`, or `dir`. It represents its children.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-span-element
 */

span {}
	
	/**
	 * The italic version of an ampersand is more decorative and interesting
	 * than its roman counterpart.
	 *
	 * @see http://simplebits.com/notebook/2008/08/14/ampersands-2/
	 * @see http://dev.w3.org/html5/spec/Overview.html#the-span-element
	 * @see http://fluidbaselinegrid.com/css/style.css
	 */
	
	span.amp1 {
		font-size: 110%;
		font-family: @amp;
		font-weight: 400;
		font-style: italic;
		line-height: 0;
		vertical-align: baseline;
		position: relative;
	}

/**
 * The `<strong>` element represents strong importance for its contents.
 * Indicate relative importance by nesting strong elements; each strong
 * element increases the importance of its contents. Changing the
 * importance of a piece of text with the strong element does not change
 * the meaning of the sentence.
 *
 * The `<b>` element represents a span of text to be stylistically offset
 * from the normal prose without conveying any extra importance. Examples
 * are key words in a document abstract, product names in a review, or
 * other spans of text whose typical typographic presentation is bold.
 *
 * The `<b>` element should be used as a last resort when no other element
 * is more appropriate. In particular, headings should use the `<h1>` to
 * `<h6>` elements, stress emphasis should use the `<em>` element,
 * importance should be denoted with the `<strong>` element, and text
 * marked or highlighted should use the `<mark>` element.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-strong-element
 * @see http://dev.w3.org/html5/spec/Overview.html#the-b-element
 */

strong,
b { font-weight: bold; }

/**
 * The `<sub>` element can be used inside a `<var>` element, for variables
 * that have subscripts.
 *
 * The `<sup>` element represents a superscript and the `<sub>` element
 * represents a subscript.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-sub-and-sup-elements
 * @see https://gist.github.com/unruthless/413930
 */

sub,
sup {
	font-size: 75%;
	line-height: 0;
	vertical-align: baseline;
	position: relative;
}
sub { bottom: -.25em; }
sup { top: -.5em; }

/**
 * The `<time>` element represents a precise date and/or time in the
 * proleptic Gregorian calendar. The time element encodes modern dates and
 * times in a machine-readable way, so that, for example, user agents
 * could offer to add an event to the user's calendar.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-time-element
 * @see http://html5doctor.com/the-time-element/
 * @see http://www.webmonkey.com/2012/02/the-html5-time-element-is-back-and-better-than-ever/
 */

time {}

/**
 * The `<u>` element represents a span of text with an unarticulated,
 * though explicitly rendered, non-textual annotation (when you are
 * annotating something, but not explicitly saying what it is). Examples
 * include indicating misspelled words, labeling proper names in
 * traditional Chinese prose, or indicating a family name when the name’s
 * order is non-western.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-u-element
 * @see http://html5doctor.com/u-element/
 */

u { text-decoration: underline; }

/**
 * The `<var>` element represents a variable. This could be an actual
 * variable in a mathematical expression or programming context, or it
 * could just be a term used as a placeholder in prose.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-var-element
 */

var { font-style: italic; }

/**
 * The `<wbr>` element represents a line break opportunity. Any content
 * inside `<wbr>` elements must not be considered part of the surrounding
 * text.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-wbr-element
 * @see http://www.quirksmode.org/oddsandends/wbr.html
 * @see http://gojomo.blogspot.com/2005/03/cross-browser-invisible-word-break-in.html
 * @see http://www.html-5.com/tags/wbr-tag/index.html
 */

wbr {}
wbr:after { content: "\00200B"; }

/*----------------------------------( EDITS )----------------------------------*/


/**
 * The `<del>` element represents a removal from the document; `<del>`
 * elements should not cross implied paragraph boundaries.
 *
 * The `<ins>` element represents an addition to the document. The `<ins>`
 * elements should not cross implied paragraph boundaries.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-del-element
 * @see http://dev.w3.org/html5/spec/Overview.html#the-ins-element
 */

del,
ins {
	line-height: 0;
	border-radius: .1875rem; // 3px
	padding: .125rem .3125rem; // 2px 5px
	position: relative;
}
del {
	text-decoration: line-through;
	color: darken(@chili, 20%);
	background-color: fade(@chili, 25%);
}
ins {
	text-decoration: none;
	color: darken(@frog, 20%);
	background-color: fade(@frog, 25%);
}

/*----------------------------------( EMBEDED CONTENT )----------------------------------*/

/**
 * The `<area>` element represents either a hyperlink with some text and a
 * corresponding area on an image map, or a dead area on an image map.
 *
 * If the `<area>` element has no `href` attribute, then the area
 * represented by the element cannot be selected, and the `alt` attribute
 * must be omitted.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-area-element
 */

area {}

/**
 * The `<audio>` element represents a sound or audio stream.
 *
 * Content may be nested inside the audio element. User agents should not
 * show this content to the user. Authors should use this content to force
 * older browsers to use a legacy audio plugin or to inform the user of
 * how to access the audio content.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#audio
 * @see http://html5doctor.com/native-audio-in-the-browser/
 */

audio {}

/**
 * The `<canvas>` element represents a resolution-dependent bitmap canvas,
 * which can be used for rendering graphs, game graphics, or other visual
 * images on the fly.
 *
 * Authors should not use the canvas element in a document when a more
 * suitable element is available. For example, it is inappropriate to use
 * a `<canvas>` element to render a page heading. If the desired
 * presentation of the heading is graphically intense, it should be marked
 * up using appropriate elements (typically `<h1>`) and then styled using
 * CSS and supporting technologies such as XBL.
 *
 * When authors use the `<canvas>` element, they must also provide content
 * that, when presented to the user, conveys essentially the same function
 * or purpose as the bitmap canvas. This content should be nested within
 * the `<canvas>` element as a fallback.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-canvas-element
 */

canvas {}

/**
 * The `<embed>` element represents an integration point for an external
 * (typically non-HTML) application or interactive content.
 *
 * The optional `src` attribute specifies the URL of the resource being
 * embedded.
 *
 * The optional `type` attribute specifies the MIME type of the plugin to
 * instantiate. The value must be a valid MIME type, optionally with
 * parameters. If both the `type` attribute and the `src` attribute are
 * present, then the `type` attribute must specify the same MIME type as
 * the explicit `Content-Type` metadata of the resource given by the `src`
 * attribute.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-embed-element
 */

embed {}

/**
 * The `<iframe>` element represents a nested browsing context.
 *
 * For `<iframe>` elements in HTML documents, the attribute, if present,
 * must have a value using the HTML syntax that consists of the following
 * syntactic components, in the given order:
 *
 * * Any number of comments and space characters.
 * * Optionally, a `<doctype>`.
 * * Any number of comments and space characters.
 * * The root element, in the form of an html element.
 * * Any number of comments and space characters.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-iframe-element
 */

iframe {}

/**
 * An `<img>` element represents an image. The image given by the `src`
 * attribute is the embedded content, and the value of the alt attribute
 * is the `<img>` element's fallback content.
 *
 * The `src` attribute must be present, and must contain a valid non-empty
 * URL potentially surrounded by spaces referencing a non-interactive,
 * optionally animated, image resource that is neither paged nor scripted.
 *
 * The `<img>` element must not be used as a layout tool. In particular,
 * `<img>` elements should not be used to display transparent images, as
 * they rarely convey meaning and rarely add anything useful to the
 * document.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-img-element
 */

img {
	max-width: 100%;
	max-height: 100%;
	vertical-align: middle;
}
	.stoops-img-default {
		max-width: none;
		max-height: none;
	}

/**
 * The `<map>` element, in conjunction with any area element descendants,
 * defines an image map. The element represents its children.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-map-element
 */

map {}

/**
 * The top-level element in MathML is `<math>`. Every valid MathML
 * instance must be wrapped in `<math>` tags. In addition you must not
 * nest a second `<math>` element in another, but you can have an
 * arbitrary number of other child elements in it.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#math
 */

math {}

/**
 * The `<object>` element can represent an external resource, which,
 * depending on the type of the resource, will either be treated as an
 * image, as a nested browsing context, or as an external resource to be
 * processed by a plugin.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-object-element
 */

object {}

/**
 * The `<param>` element defines parameters for plugins invoked by
 * `<object>` elements. It does not represent anything on its own.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-param-element
 */

param {}

/**
 * The `<source>` element allows authors to specify multiple alternative
 * media resources for media elements. It does not represent anything on
 * its own. The `src` attribute gives the address of the media resource.
 * The value must be a valid non-empty URL potentially surrounded by
 * spaces. This attribute must be present.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-source-element
 */

source {}

/**
 * The `<svg>` element can be used to nest a standalone SVG fragment
 * inside the current document (which can be an HTML document). This
 * standalone fragment has its own viewport and coordinate system.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#svg
 */

svg {}

/**
 * The `<track>` element allows authors to specify explicit external timed
 * text tracks for media elements. It does not represent anything on its
 * own.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-track-element
 */

track {}

/**
 * The `<video>` element represents a video or movie.
 *
 * Content may be nested inside the `<video>` element. User agents should
 * not show this content to the user. Authors should use this content to
 * force older browsers to use a legacy video plugin or to inform the user
 * of how to access the video content.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#video
 */

video {}

/*----------------------------------( TABULAR DATA )----------------------------------*/

/**
 * Simple solution for responsive tables.
 *
 * @see http://www.maxdesign.com.au/2013/03/22/simple-responsive-table/
 * @see http://creativeandcode.com/simple-solution-for-responsive-tables/
 */

.stoops-scrollable {
	width: 100%;
	margin: .625rem 0; // 10px 0
	overflow-y: auto;
	-webkit-overflow-scrolling: touch;
}
	.stoops-scrollable > * { margin: 0 !important; }

/*--------------------------------------------------------------------*/

/**
 * The `<table>` element represents data with more than one dimension, in
 * the form of a table. Tables must not be used as layout aids.
 *
 * Permitted content in this order:
 *
 * * an optional `<caption>` element,
 * * zero or more `<colgroup>` elements,
 * * an optional `<thead>` element,
 * * one of the two alternatives:
 *   * one `<tfoot>` element, followed by:
 *     * zero or more `<tbody>` elements,
 *     * or one or more `<tr>` elements,
 *   * a second alternative followed by an optional `<tfoot>` element:
 *     * either zero or more `<tbody>` elements,
 *     * or one or more `<tr>` elements
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-table-element
 * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table
 * @see http://www.vanseodesign.com/web-design/baseline-grid-non-textual/
 */

table {
	border-collapse: collapse;
	border-spacing: 0;
}

/**
 * The `<caption>` element represents the title of a `<table>` element.
 *
 * When a `<table>` element is the only content in a `<figure> element
 * other than the `<figcaption>`, the `<caption>` element should be
 * omitted in favor of the `<figcaption>`.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-caption-element
 */

caption {
	font-size: .875rem; // 14px
	line-height: 1.28571428571428; // (((1.5 / .875) = 1.71428571428571) * .75) = 1.28571428571428
	padding: .21428571428572em 0; // (((1.71428571428571 * .25) = .42857142857143) / 2) = .21428571428572
}

/**
 * The `<colgroup>` element represents a group of one or more columns in a
 * `<table>` element.
 *
 * If the `<colgroup>` element contains no `<col>` elements, then the
 * element may have a `span` content attribute specified, whose value must
 * be a valid non-negative integer greater than zero.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-colgroup-element
 */

colgroup {}

/**
 * The `<col>` element represents one or more columns in the column group
 * represented by a `<table>` element's `<colgroup>`.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-col-element
 */

col {}

/**
 * The `<thead>` element represents the block of rows that consist of the
 * column labels (headers) for the parent `<table>` element.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-thead-element
 */

thead {}
thead th {}

/**
 * The `<tfoot>` element represents the block of rows that consist of the
 * column summaries (footers) for the parent `<table>` element.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-tfoot-element
 */

tfoot {}

/**
 * The `<tbody>` element represents a block of rows that consist of a body
 * of data for the parent `<table>` element.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-tbody-element
 */

tbody {}

/**
 * The `<tr>` element represents a row of cells in a `<table>` element.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-tr-element
 */

tr {}

/**
 * The `<th>` element represents a header cell in a `<table>` element.
 *
 * The `<td>` element represents a data cell in a `<table>` element.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-th-element
 * @see http://dev.w3.org/html5/spec/Overview.html#the-td-element
 */

th,
td {
	font-size: 1rem; // 16px
	line-height: 1.125; // (((1.5 / 1) = 1.5) * .75) = 1.125
	margin: 0;
	padding: .1875em 0; // (((1.5 * .25) = .375) / 2) = .1875
}

/*--------------------------------------------------------------------*/

.stoops-table {
	margin: .625rem 0; // 10px 0
	width: 100%;
}
	.stoops-table caption { text-align: left; }
	.stoops-table thead { vertical-align: bottom; }
	.stoops-table tfoot th
	.stoops-table tfoot td {
		font-weight: normal;
		color: @gray3;
	}
	.stoops-table th,
	.stoops-table td {
		text-align: left;
		padding-right: .625rem; // 10px
		padding-left: .625rem; // 10px
	}
	.stoops-table th:first-child,
	.stoops-table td:first-child { padding-left: 0; }
	.stoops-table th:last-child,
	.stoops-table td:last-child { padding-right: 0; }
	.stoops-table th { white-space: nowrap; }
	.stoops-table tbody { vertical-align: top; }

.stoops-table-border-x th,
.stoops-table-border-x td {
	border-top: .0625rem solid fade(@raven, 25%);
	border-bottom: .0625rem solid fade(@raven, 25%);
}
.stoops-table-border-x tr:first-child th { border-top: 0; }
.stoops-table-border-x tbody tr:last-child th,
.stoops-table-border-x tr:last-child td { border-bottom: 0; }

.stoops-table-border-y {}
	.stoops-table-border-y th,
	.stoops-table-border-y td {
		border-right: .0625rem solid fade(@raven, 25%); // 1px
		border-left: .0625rem solid fade(@raven, 25%); // 1px
	}
		.stoops-table-border-y th:first-child,
		.stoops-table-border-y td:first-child { border-left: none; }
		.stoops-table-border-y th:last-child,
		.stoops-table-border-y td:last-child { border-right: none; }

.stoops-table-striped tbody tr:nth-of-type(odd) { background: fade(@raven, 5%); }

/*----------------------------------( FORMS )----------------------------------*/

/**
 * The `<form>` element represents a collection of form-associated
 * elements, some of which can represent editable values that can be
 * submitted to a server for processing.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-form-element
 * @see http://purecss.io/forms/
 * @see https://github.com/yui/pure/
 * @see https://github.com/yui/yui3
 */

form { margin: 0; }

/**
 * The `<button>` element represents a button. If the element is not
 * disabled, then the user agent should allow the user to activate the
 * button.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-button-element
 */

button {
	line-height: normal;
	vertical-align: baseline;
	cursor: pointer;
	-webkit-appearance: button;
}
button::-moz-focus-inner {
	border: 0;
	padding: 0;
}

/**
 * The `<datalist>` element represents a set of option elements that
 * represent predefined options for other controls. The contents of the
 * element represents fallback content for legacy user agents, intermixed
 * with `<option>` elements that represent the predefined options. In the
 * rendering, the `<datalist>` element represents nothing and it, along
 * with its children, should be hidden.
 *
 * The `<datalist>` element is hooked up to an `<input>` element using the
 * `list` attribute on the `<input>` element.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-datalist-element
 */

datalist {}

/**
 * The `<fieldset>` element is expected to establish a new block
 * formatting context.
 *
 * If the `<fieldset>` element has a child that matches the conditions in
 * the list below, then the first such child is the `<fieldset>` element's
 * rendered legend:
 *
 * * The child is a `<legend>` element.
 * * The child is not out-of-flow (e.g. not absolutely positioned or floated).
 * * The child is generating a box (e.g. it is not `display: none`).
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-fieldset-element
 */

fieldset {
	border: 0;
	padding: 0;
}

/**
 * The `<input>` element represents a typed data field, usually with a
 * form control to allow the user to edit the data.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-input-element
 */

input {
	line-height: normal;
	vertical-align: baseline;
}
input::-moz-focus-inner {
	border: 0;
	padding: 0;
}
input[type="button"],
input[type="reset"],
input[type="submit"] {
	cursor: pointer;
	-webkit-appearance: button;
}
input[type="search"] { -webkit-appearance: textfield; }
input[type="search"]::-webkit-search-decoration { -webkit-appearance: none; }

/**
 * The `<keygen>` element represents a key pair generator control. When
 * the control's form is submitted, the private key is stored in the local
 * keystore, and the public key is packaged and sent to the server.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-keygen-element
 */

keygen {}

/**
 * The `<label>` element represents a caption in a user interface which
 * can be associated with a specific form control, known as the `<label>`
 * element's labeled control, either using the `for` attribute, or by
 * putting the form control inside the `<label>` element itself.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-label-element
 */

label {}

/**
 * The `<legend>` element represents a caption for the parent `<fieldset>`
 * element.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-legend-element
 */

legend {
	font-size: 1.125em; /* 18px */
	line-height: 1; /* (((1.5 / 1.125) = 1.33333333333333) * .75) = 1 */
	color: #333;
	border-bottom: 1px solid #999;
	width: 100%;
	margin-bottom: 1em;
	padding: .3em 0;
	display: block;
}

/**
 * When the meter binding applies to a `<meter>` element, the element is
 * expected to render as an `inline-block` box with a `height` of `1em`
 * and a `width` of `5em`, a `vertical-align` of `-0.2em`, and with its
 * contents depicting a gauge.
 *
 * When the element is wider than it is tall (or square), the depiction is
 * expected to be of a horizontal gauge, with the minimum value on the
 * right if the `direction` property on this element has a computed value
 * of `rtl`, and on the left otherwise. When the element is taller than it
 * is wide, it is expected to depict a vertical gauge, with the minimum
 * value on the bottom.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-meter-element-0
 * @see http://html5doctor.com/measure-up-with-the-meter-tag/
 */

meter {}

/**
 * The `<optgroup>` element represents a group of `<option>` elements with
 * a common label. The element's group of `<option>` elements consists of
 * the `<option>` elements that are children of the `<optgroup>` element.
 *
 * When showing `<option>` elements in `<select>` elements, user agents
 * should show the `<option>` elements of such groups as being related to
 * each other and separate from other `<option>` elements.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-optgroup-element
 * @see http://www.htmldog.com/reference/htmltags/optgroup/
 */

optgroup {}

/**
 * The `<option>` element represents an option in a `<select>` element or
 * as part of a list of suggestions in a `<datalist>` element.
 *
 * In certain circumstances described in the definition of the `<select>`
 * element, an `<option>` element can be a `<select>` element's
 * placeholder label option. A placeholder label option does not represent
 * an actual option, but instead represents a label for the `<select>`
 * control.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-option-element
 */

option {}

/**
 * The `<output>` element represents the result of a calculation.
 *
 * The optional `for` attribute allows an explicit relationship to be made
 * between the result of a calculation and the elements representing the
 * values that influenced the calculation. If specified, the `for`
 * attribute must contain a string consisting of an unordered set of
 * unique, space-separated tokens, each of which must be the `id` of an
 * element in the same document.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-output-element
 * @see http://html5doctor.com/the-output-element/
 */

output {}

/**
 * The `<progress>` element epresents the completion progress of a task.
 * Progress may be either indeterminate — meaning it is unclear how much
 * work remains before the task is complete (e.g., the task is waiting for
 * a response from a remote host) — or a numeric value between 0 and a
 * given maximum, explicitly specifying the fraction of work that has so
 * far been completed.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-progress-element
 * @see http://html5doctor.com/the-progress-element/
 */

progress {}

/**
 * The `<select>` element represents a control for selecting amongst a set
 * of options.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-select-element
 */

select { vertical-align: baseline; }

/**
 * The `<textarea>` element represents a multiline plain text edit control
 * for the element's raw value. The contents of the control represent the
 * control's default value.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-textarea-element
 * @see http://davidwalsh.name/textarea-resize
 * @see http://www.456bereastreet.com/lab/styling-form-controls-revisited/text-input-multiple/
 */

textarea {
	overflow: auto;
	vertical-align: top;
	resize: vertical; /* [ none | horizontal | vertical | both ] */
	width: 100%;
}

/*----------------------------------( INTERACTIVE ELEMENTS )----------------------------------*/

/**
 * The `<details>` element represents a disclosure widget from which the
 * user can obtain additional information or controls. However, the
 * `<details>` element is not appropriate for footnotes.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-details-element
 */

details {}

/**
 * The `<menu>` element represents a list of commands.
 *
 * If a `<menu>` element's `type` attribute is in the context menu state,
 * then the element represents the commands of a context menu, and the
 * user can only interact with the commands if that context menu is
 * activated. If a `<menu>` element's `type` attribute is in the toolbar
 * state, then the element represents a list of active commands that the
 * user can immediately interact with.
 *
 * If a `<menu>` element's `type` attribute is in the list state, then the
 * element either represents an unordered list of items (each represented
 * by an `<li>` element), each of which represents a command that the user
 * can perform or activate, or, if the element has no `<li>` element
 * children, flow content describing available commands.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#menus
 */

menu {}

/**
 * The `<menuitem>` element represents a command which the user can invoke.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-menuitem-element
 */

menuitem {}

/**
 * The `<summary>` element represents a summary, caption, or legend for
 * the rest of the contents of the summary element's parent `<details>`
 * element.
 *
 * @see http://dev.w3.org/html5/spec/Overview.html#the-summary-element
 */

summary {}

/*----------------------------------( SELECTION )----------------------------------*/

/**
 * The `<pre>` element represents a block of preformatted text, in which
 * structure is represented by typographic conventions rather than by
 * elements.
 * 
 * @see https://raw.github.com/twitter/bootstrap/master/docs/assets/css/bootstrap.css
 * @see http://perishablepress.com/wrapping-content/
 * @see http://perishablepress.com/perfect-pre-tags/
 * @see http://dev.w3.org/html5/spec/Overview.html#the-pre-element
 */

::-moz-selection {
	background: fade(lighten(@bruise, 40%), 75%);
	text-shadow: none;
}
::selection {
	background: fade(lighten(@bruise, 40%), 75%);
	text-shadow: none;
}
